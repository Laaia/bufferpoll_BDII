Universidade Federal da Fronteira Sul – UFFS 
Curso: Ciência da Computação
Componente Curricular: Banco de Dados II
Professor: Dr. Denio Duarte
Alunos: Gabrielle Almeida de Souza e Lais Borin

Introdução
	Trabalho desenvolvido para o componente curricular de Banco de Dados II, sua finalidade é implementar um dicionario de dados complementando o que ja havia sido feito anteriormente.

1. Definição das estruturas, foi criadas somente uma estrutura a mais.

	Estrutura armazenando os dados retirados do arquivo fs_objects.dat, dividida em nome com 20 caracteres para armazenar o nome da tabela, cod com 4B para armazenar o codigo da tabela, nArquivo com 20 caracteres para armazenar o nome do arquivo que tem os dados referentes a tabela e qtdCampos com 4B para armazenar a quantidade de campos que a tabela apresenta.

struct fs_objects { 
	char nome[20];
	int cod;
	char nArquivo[20];
	int qtdCampos;
};

	O arquivo fs_schema organiza-se da seguinte forma:
		4B que representam o codigo da tabela; (Código que representa a tabela em fs_objects.dat)
		40B que representam o nome do campo;
		1B que representa o tipo do campo;
		4B que representa o tamanho do campo.


2. Definição das funções, encontradas juntamente com as estruturas definidas acima no buffend.h as funções são:

1. tp_buffer * initbuffer();
2. void cpystr(char *, char *, int, int);
3. int load_metadata(FILE *, tp_table *, int);
4. int drawline(tp_buffer *buffpoll, tp_table *s, struct fs_objects objeto, int p, int num_page);
5. int cabecalho(tp_table *, int);
6. int printbufferpoll(tp_buffer *buffpoll, tp_table *s,struct fs_objects objeto, int num_page);
7. void cria_campo(int tam, int header, char *val, int x);
8.void load_data( struct fs_objects objeto, tp_buffer *bufferpool, int tam_registro);
9. struct fs_objects leObjeto(char *nTabela);
10. tp_table *leSchema (struct fs_objects objeto);
11. int tamTupla(tp_table *esquema, struct fs_objects objeto);


	1 – Esta tem como funcionalidade inicializar os valores da estrutura buffer.
	2 – Possui um propósito simples, copiar o conteúdo do vetor origem para o destino. Para que isso seja possível seus parâmetros são, cpystr(destino, origem, número_de_registros_na_página, tamanho_do_registro);
	3 – (Funcao em desuso). load_metada como o próprio nome sugere carrega as informações referentes aos meta dados, seus parâmetros são na ordem, ponteiro para o arquivo, ponteiro para a estrutura de meta dados e o número de campos encontrados naquela “tabela”;
	4 – Esta função imprime uma linha/tupla da tabela, ele espera como parâmetro, ponteiro para o buffer, para o esquema, para o objeto, o número do registro a ser impresso e em qual página encontra-se aquela determinada tupla;
	5 – A função cabeçalho imprime o nome de cada campo/coluna da tabela, espera como parâmetro o número colunas/registros/campos e claro um ponteiro para a estrutura do esquema;
	6 – Esta função imprime todas os dados carregados numa determinada página do buffer, os parâmetros esperados são, ponteiro para o buffer, para o esquema, para o objeto e o numero da pagina a ser impressa;
	7 – Cria campo é uma função auxiliar que ajuda, as funções 4, 5 e 6 na tabulação, para os dados serem impressos na tela no formato de uma tabela. 
	8 – E finalmente a load_data responsável por resgatar os dados presentes no arquivo e armazena-los no buffer, seus parâmetro também são ponteiros para as estruturas objeto, buffer, e tamanho da tupla retornado da funcao tamTupla();
	9 - Função que verifica se o nome solicitado da tabela existe no dicionario de dados. Caso exista ela retorna uma estrutura contendo os dados sobre a tabela na estrutura fs_objects.
	10 - Função com o objetivo de intedentificar o esquema da tabela atravez do codigo da mesma. Essa função tem como parâmetro somente a estrutura de objeto que contém o codigo que a função usa para identificar os campos da tabela.
	11- Essa funcao retorna o tamanho da tupla da tabela de dados. Tem parâmetros para o esquema e o objeto.

3. Da compilação:

	$ gcc *.c -o prog -Wall
	$ ./prog <Nome da Tabela>

	Obs.: Estão inclusas as tabelas Cliente(nome varchar(20), idade integer, sexo varchar(1)) e Cidade(nome varchar(20), sigla varchar(4)) com 10 tuplas cada tabela. 





